(function(){var t,e=function(t,e){return function(){return t.apply(e,arguments)}},n={}.hasOwnProperty,i=function(t,e){function i(){this.constructor=t}for(var r in e)n.call(e,r)&&(t[r]=e[r]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t};t=Giraffe.Contrib={version:"0.1.3"},t.CollectionView=function(t){function n(){this.addOne=e(this.addOne,this);var t;if(n.__super__.constructor.apply(this,arguments),_.defaults(this,this.constructor.getDefaults()),!this.modelView)throw Error("`modelView` is required");if(!(null!=(t=this.collection)?t.model:void 0))throw Error("`collection.model` is required");this.listenTo(this.collection,"add",this.addOne),this.listenTo(this.collection,"remove",this.removeOne),this.listenTo(this.collection,"reset",this.render),this.listenTo(this.collection,"sort",this.render)}return i(n,t),n.getDefaults=function(){return{collection:new Giraffe.Collection,modelView:Giraffe.View,modelViewArgs:null,modelViewEl:null}},n.prototype._calcAttachOptions=function(t){var e,n,i,r,s;for(i={el:null,method:"prepend"},n=this.collection.indexOf(t),e=1;r=this.collection.at(n-e);){if(s=_.findWhere(this.children,{model:r}),null!=s?s._isAttached:void 0){i.method="after",i.el=s.$el;break}e++}if(!i.el&&this.modelViewEl&&(i.el=this.$(this.modelViewEl),!i.el.length))throw Error("`modelViewEl` not found in this view");return i},n.prototype._cloneModelViewArgs=function(){var t;if(t=this.modelViewArgs||[{}],_.isFunction("function")&&(t=t.call(this)),t=_.clone(t),_.isArray(t)||(t=[t]),!_.isArray(t)||!_.isObject(t[0]))throw Error("`modelViewArgs` must be an array with an object as the first value");return t},n.prototype.afterRender=function(){return this.collection.each(this.addOne),this},n.prototype.removeOne=function(t){var e;return e=_.findWhere(this.children,{model:t}),null!=e&&e.dispose(),this},n.prototype.addOne=function(t){var e,n,i;return this.collection.contains(t)?this._renderedOnce?(e=this._calcAttachOptions(t),i=this._cloneModelViewArgs(),i[0].model=t,n=function(t,e,n){n.prototype=t.prototype;var i=new n,r=t.apply(i,e);return Object(r)===r?r:i}(this.modelView,i,function(){}),this.attach(n,e)):this.render():this.collection.add(t),this},n}(Giraffe.View)}).call(this);